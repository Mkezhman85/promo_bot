import 'dotenv/config';
import { Markup, Telegraf } from 'telegraf';
import LocalSession from 'telegraf-session-local';
import { IMyContext } from './interfaces/sessions.interface';
import { IBotService } from './interfaces/bot.service.interface';
import { ILogger } from '../infrastructure/logger/logger.interface';
import { TYPES } from '../types';
import { injectable, inject } from 'inversify';
import 'reflect-metadata';
import { commands } from './bot_command';
import { ICityService } from '../subjects/cities/interfaces/city.service.interface';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
import { IConfigService } from '../infrastructure/config/config.service.interface';
import { ITopicService } from '../subjects/topics/interfaces/topic.service.interface';
import { keyboard } from './bot_keyboard';
import { SceneGenerate } from './scene_generate';

@injectable()
export class BotService implements IBotService {
	bot: Telegraf<IMyContext>;

	constructor(
		@inject(TYPES.ILogger) private loggerService: ILogger,
		@inject(TYPES.ConfigService) private configService: IConfigService,
		@inject(TYPES.CityService) private cityService: ICityService,
		@inject(TYPES.TopicService) private topicService: ITopicService,
		@inject(TYPES.SceneGenerate) private sceneGenerate: SceneGenerate,
	) {
		this.bot = new Telegraf<IMyContext>(this.configService.get('TOKEN'));
	}

	init(): void {
		try {
			const stage = this.sceneGenerate.init();
			this.bot.use(new LocalSession({ database: 'session.json' }).middleware());
			this.bot.use(stage.middleware());

			this.bot.use((ctx, next) => {
				ctx.session.myProp;
				ctx.scene.session.myProps;
				next();
			});

			this.bot.start(async (ctx) => {
				await ctx.replyWithMarkdown(
					`–ü—Ä–∏–≤–µ—Ç, ${
						ctx.message.from.first_name ? ctx.message.from.first_name : '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'
					}! –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏*`,
					Markup.inlineKeyboard([Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin')]),
				);
			});

			this.bot.hears('‚èÆ –í—ã—Ö–æ–¥', async (ctx) => {
				ctx.scene.leave();
				ctx.replyWithMarkdown('–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –≤—ã—Ö–æ–¥. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */start*');
			});

			this.bot.action('begin', async (ctx) => {
				await ctx.scene.enter('getCityScene');
				await ctx.reply('üåÜ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥...', keyboard);
			});

			this.bot.action('citiesList', async (ctx) => {
				const allCities = await this.cityService.getAllCities();
				const citiesKeys: InlineKeyboardButton[][] = [];
				if (allCities?.length) {
					allCities.forEach((cityItem) => {
						citiesKeys.push([{ text: cityItem.name, callback_data: cityItem.name }]);
					});
					await ctx.reply(`–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≥–æ—Ä–æ–¥–∞:`, {
						reply_markup: {
							inline_keyboard: citiesKeys,
						},
					});
					await ctx.scene.enter('getCityScene');
				} else {
					ctx.reply('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≥–æ—Ä–æ–¥–∞...', keyboard);
				}
			});

			this.bot.action('topicList', async (ctx) => {
				const allTopics = await this.topicService.getAllTopics();
				const topi—ÅKeys: InlineKeyboardButton[][] = [];
				if (allTopics?.length) {
					allTopics.forEach((topicItem) => {
						topi—ÅKeys.push([{ text: topicItem.title, callback_data: topicItem.title }]);
					});
					ctx.reply(`üõç –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º–∞—Ç–∏–∫:`, {
						reply_markup: {
							inline_keyboard: topi—ÅKeys,
						},
					});
					ctx.scene.enter('getPromotionsScene');
				} else {
					ctx.reply('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º–∞—Ç–∏–∫–∏...', keyboard);
				}
			});

			this.bot.action('back', (ctx) => {
				ctx.scene.leave();
				ctx.replyWithMarkdown('–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –≤—ã—Ö–æ–¥. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */start*');
			});

			this.bot.help((ctx) => ctx.reply(commands));
			this.bot.launch();

			// Enable graceful stop
			process.once('SIGINT', () => this.bot.stop('SIGINT'));
			process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
			this.loggerService.log(`[BotService] –ë–æ—Ç ${this.bot.botInfo} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...`);
		} catch (err) {
			if (err instanceof Error) {
				this.loggerService.error('[BotService] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞: ', err.message);
			}
		}
	}
}
