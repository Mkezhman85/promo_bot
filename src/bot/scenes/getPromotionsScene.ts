import { inject, injectable } from 'inversify';
import { Markup, Scenes } from 'telegraf';
import { InlineKeyboardButton } from 'telegraf/typings/core/types/typegram';
import { ICityService } from '../../subjects/cities/interfaces/city.service.interface';
import { IPromotionService } from '../../subjects/promotions/interfaces/promotion.service.interface';
import { ITopicService } from '../../subjects/topics/interfaces/topic.service.interface';
import { TYPES } from '../../types';
import { keyboard } from '../bot_keyboard';
import { IMyContext } from '../interfaces/sessions.interface';
import { IScene } from '../interfaces/scene.interface';

@injectable()
export class GetPromotionsScene implements IScene {
	constructor(
		@inject(TYPES.CityService) private cityService: ICityService,
		@inject(TYPES.TopicService) private topicService: ITopicService,
		@inject(TYPES.PromotionService) private promotionService: IPromotionService,
	) {}
	init(): Scenes.BaseScene<IMyContext> {
		const getPromotionsScene = new Scenes.BaseScene<IMyContext>('getPromotionsScene');
		let topic: string;
		let city: string;
		getPromotionsScene.on('text', async (ctx) => {
			topic = ctx.message.text;
			const existedTopic = await this.topicService.getTopicInfo(topic);
			if (existedTopic) {
				const promotions = await this.promotionService.findPromotions(city, topic);
				const promotionsKeys: InlineKeyboardButton[][] = [];
				if (promotions?.length) {
					promotions.forEach((promotionItem) => {
						promotionsKeys.push([
							{ text: promotionItem.title, callback_data: promotionItem.title },
						]);
					});
					await ctx.reply(`–í –≥–æ—Ä–æ–¥–µ ${city} –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∞–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ "${topic}":`, {
						reply_markup: {
							inline_keyboard: promotionsKeys,
						},
					});
					await ctx.reply('‚ÑπÔ∏è –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É –∞–∫—Ü–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É...', keyboard);
				} else {
					ctx.reply(
						`–í –≥–æ—Ä–æ–¥–µ ${city} –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ "${topic}" –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π...`,
						Markup.inlineKeyboard([
							Markup.button.callback('üîç –ù–∞–π—Ç–∏ –∞–∫—Ü–∏–∏', 'begin'),
							Markup.button.callback('‚èÆ –í—ã—Ö–æ–¥', 'back'),
						]),
					);
					ctx.scene.leave();
				}
			} else {
				ctx.reply(`–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ —Ç–µ–º–∞—Ç–∏–∫–∞ "${topic}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞...`, keyboard);
				ctx.reply('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —É–∫–∞–∑–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É...');
				ctx.scene.reenter();
			}
			ctx.scene.leave();
		});

		return getPromotionsScene;
	}
}
